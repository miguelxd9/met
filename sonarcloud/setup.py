#!/usr/bin/env python3
"""
Script de setup para SonarCloud Metrics DevOps

Este script facilita la configuraci√≥n inicial del proyecto.
"""

import os
import sys
import subprocess
import argparse
from pathlib import Path


def run_command(command: str, description: str) -> bool:
    """Ejecutar un comando y mostrar el resultado"""
    print(f"\nüîÑ {description}...")
    try:
        result = subprocess.run(command, shell=True, check=True, capture_output=True, text=True)
        print(f"‚úÖ {description} completado exitosamente")
        if result.stdout:
            print(result.stdout)
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Error en {description}:")
        print(f"Comando: {command}")
        print(f"Error: {e.stderr}")
        return False


def check_python_version() -> bool:
    """Verificar que la versi√≥n de Python sea compatible"""
    print("üêç Verificando versi√≥n de Python...")
    version = sys.version_info
    if version.major < 3 or (version.major == 3 and version.minor < 8):
        print(f"‚ùå Python {version.major}.{version.minor} no es compatible. Se requiere Python 3.8+")
        return False
    print(f"‚úÖ Python {version.major}.{version.minor}.{version.micro} es compatible")
    return True


def check_dependencies() -> bool:
    """Verificar que las dependencias est√©n instaladas"""
    print("\nüì¶ Verificando dependencias...")
    
    required_packages = [
        "sqlalchemy",
        "alembic", 
        "psycopg2",
        "httpx",
        "pydantic",
        "structlog",
        "rich"
    ]
    
    missing_packages = []
    
    for package in required_packages:
        try:
            __import__(package.replace("-", "_"))
            print(f"‚úÖ {package}")
        except ImportError:
            print(f"‚ùå {package} - No instalado")
            missing_packages.append(package)
    
    if missing_packages:
        print(f"\n‚ö†Ô∏è  Paquetes faltantes: {', '.join(missing_packages)}")
        print("Ejecuta: pip install -r requirements.txt")
        return False
    
    return True


def check_environment_file() -> bool:
    """Verificar que el archivo .env existe"""
    print("\nüîß Verificando archivo de configuraci√≥n...")
    
    env_file = Path(".env")
    env_example = Path("env.example")
    
    if not env_file.exists():
        if env_example.exists():
            print("‚ö†Ô∏è  Archivo .env no encontrado")
            print("üìã Copiando env.example a .env...")
            try:
                with open(env_example, 'r') as src:
                    with open(env_file, 'w') as dst:
                        dst.write(src.read())
                print("‚úÖ Archivo .env creado desde env.example")
                print("‚ö†Ô∏è  IMPORTANTE: Edita el archivo .env con tus credenciales")
                return True
            except Exception as e:
                print(f"‚ùå Error al crear .env: {e}")
                return False
        else:
            print("‚ùå No se encontr√≥ env.example")
            return False
    else:
        print("‚úÖ Archivo .env encontrado")
        return True


def check_database_connection() -> bool:
    """Verificar conexi√≥n a la base de datos"""
    print("\nüóÑÔ∏è  Verificando conexi√≥n a base de datos...")
    
    try:
        from src.config.settings import get_settings
        from src.database import test_database_connection
        
        settings = get_settings()
        print(f"üìä URL de base de datos: {settings.database_url}")
        
        if test_database_connection():
            print("‚úÖ Conexi√≥n a base de datos exitosa")
            return True
        else:
            print("‚ùå No se pudo conectar a la base de datos")
            print("üí° Aseg√∫rate de que PostgreSQL est√© ejecut√°ndose y la base de datos exista")
            return False
            
    except Exception as e:
        print(f"‚ùå Error al verificar base de datos: {e}")
        return False


def run_migrations() -> bool:
    """Ejecutar migraciones de Alembic"""
    print("\nüîÑ Ejecutando migraciones de base de datos...")
    
    try:
        # Verificar que alembic est√© configurado
        if not Path("alembic.ini").exists():
            print("‚ùå No se encontr√≥ alembic.ini")
            return False
        
        # Ejecutar migraciones
        result = subprocess.run(
            "alembic upgrade head", 
            shell=True, 
            check=True, 
            capture_output=True, 
            text=True
        )
        print("‚úÖ Migraciones ejecutadas exitosamente")
        if result.stdout:
            print(result.stdout)
        return True
        
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Error al ejecutar migraciones: {e.stderr}")
        return False
    except Exception as e:
        print(f"‚ùå Error inesperado: {e}")
        return False


def test_sonarcloud_connection() -> bool:
    """Probar conexi√≥n a SonarCloud API"""
    print("\n‚òÅÔ∏è  Verificando conexi√≥n a SonarCloud...")
    
    try:
        from src.scripts.test_connection import test_sonarcloud_api
        from src.config.settings import get_settings
        import asyncio
        
        settings = get_settings()
        if not settings.sonarcloud_organization:
            print("‚ö†Ô∏è  No se configur√≥ SONARCLOUD_ORGANIZATION")
            return False
        
        # Ejecutar test de API
        result = asyncio.run(test_sonarcloud_api(settings.sonarcloud_organization))
        
        if result.get('success', False):
            print("‚úÖ Conexi√≥n a SonarCloud exitosa")
            return True
        else:
            print(f"‚ùå Error en conexi√≥n a SonarCloud: {result.get('error', 'Error desconocido')}")
            return False
            
    except Exception as e:
        print(f"‚ùå Error al verificar SonarCloud: {e}")
        return False


def main():
    """Funci√≥n principal del script de setup"""
    parser = argparse.ArgumentParser(
        description="Script de setup para SonarCloud Metrics DevOps",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Ejemplos de uso:
  python setup.py                    # Verificaci√≥n completa
  python setup.py --skip-db          # Saltar verificaci√≥n de base de datos
  python setup.py --skip-api         # Saltar verificaci√≥n de API
  python setup.py --migrations-only  # Solo ejecutar migraciones
        """
    )
    
    parser.add_argument(
        "--skip-db", 
        action="store_true", 
        help="Saltar verificaci√≥n de base de datos"
    )
    parser.add_argument(
        "--skip-api", 
        action="store_true", 
        help="Saltar verificaci√≥n de API de SonarCloud"
    )
    parser.add_argument(
        "--migrations-only", 
        action="store_true", 
        help="Solo ejecutar migraciones"
    )
    
    args = parser.parse_args()
    
    print("üöÄ Iniciando setup de SonarCloud Metrics DevOps")
    print("=" * 50)
    
    # Si solo migraciones, ejecutar y salir
    if args.migrations_only:
        if run_migrations():
            print("\n‚úÖ Setup completado exitosamente")
            return 0
        else:
            print("\n‚ùå Setup fall√≥")
            return 1
    
    # Verificaciones b√°sicas
    checks_passed = True
    
    if not check_python_version():
        checks_passed = False
    
    if not check_dependencies():
        checks_passed = False
    
    if not check_environment_file():
        checks_passed = False
    
    # Verificaciones opcionales
    if not args.skip_db:
        if not check_database_connection():
            checks_passed = False
        elif not run_migrations():
            checks_passed = False
    
    if not args.skip_api:
        if not test_sonarcloud_connection():
            checks_passed = False
    
    # Resumen final
    print("\n" + "=" * 50)
    if checks_passed:
        print("‚úÖ Setup completado exitosamente")
        print("\nüéâ ¬°El proyecto est√° listo para usar!")
        print("\nüìã Pr√≥ximos pasos:")
        print("1. Edita el archivo .env con tus credenciales")
        print("2. Ejecuta: python -m src.scripts.collect_metrics --organization tu-org --sync-all")
        print("3. Revisa los logs en la carpeta logs/")
        return 0
    else:
        print("‚ùå Setup fall√≥")
        print("\nüîß Pasos para resolver problemas:")
        print("1. Verifica que PostgreSQL est√© ejecut√°ndose")
        print("2. Crea la base de datos: CREATE DATABASE sonarcloud_metrics;")
        print("3. Configura las credenciales en .env")
        print("4. Instala dependencias: pip install -r requirements.txt")
        return 1


if __name__ == "__main__":
    sys.exit(main())
